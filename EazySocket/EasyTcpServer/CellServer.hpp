#ifndef _CellServer_Hpp_
#define _CellServer_Hpp_

#include"Cell.hpp"
#include"INetEvent.hpp"
#include"CellClient.hpp"

#include<vector>
#include<map>

// network message task class  to send 
class CellSToCTask :public CellTask
{
private:
	CellClientPtr _pClient;
	DataHeaderPtr	_pHeader;

public:
	CellSToCTask(CellClientPtr pClient, DataHeaderPtr& pHeader)
	{
		_pClient = pClient;
		_pHeader = pHeader;
	}

	virtual void doTask()
	{
		_pClient->SendData(_pHeader);
		//delete _pHeader;
	}
};

// network msg for handling class
class CellServer
{
private:
	SOCKET _sock;
	//正式客户队列
	std::map<SOCKET, CellClientPtr> _clients;
	//缓冲客户队列
	std::vector<CellClientPtr> _clientsBuff;
	//缓冲队列的锁
	std::mutex _mutex;
	std::thread _thread;
	//网络事件对象
	INetEvent* _pNetEvent;
	//
	CellTaskServer _taskServer;
public:
	CellServer(SOCKET sock = INVALID_SOCKET)
	{
		_sock = sock;
		_pNetEvent = nullptr;
	}

	~CellServer()
	{
		Close();
		_sock = INVALID_SOCKET;
	}

	void addSendTask(CellClientPtr& pClient, DataHeaderPtr& header)
	{
		auto task = std::make_shared<CellSToCTask>(pClient, header);//CellSToCTask* task = new CellSToCTask(pClient, header);
		_taskServer.addTask((CellTaskPtr)task);
	}

	void setEventObj(INetEvent* event)
	{
		_pNetEvent = event;
	}

	//关闭Socket
	void Close()
	{
		if (_sock != INVALID_SOCKET)
		{
#ifdef _WIN32
			for (auto iter : _clients)
			{
				closesocket(iter.second->sockfd());
				//delete iter.second;
			}
			//关闭套节字closesocket
			closesocket(_sock);
#else
			for (auto iter : _clients)
			{
				close(iter.second->sockfd());
				delete iter.second;
			}
			//关闭套节字closesocket
			close(_sock);
#endif
			_clients.clear();
		}
	}

	//是否工作中
	bool isRun()
	{
		return _sock != INVALID_SOCKET;
	}

	//处理网络消息
	//备份客户socket fd_set
	fd_set _fdRead_bak;
	//客户列表是否有变化
	bool _clients_change;
	SOCKET _maxSock;
	void OnRun()
	{
		_clients_change = true;
		while (isRun())
		{
			//从缓冲队列里取出客户数据
			if (_clientsBuff.empty())
			{
				std::lock_guard<std::mutex> lock(_mutex);
				for (auto pClient : _clientsBuff)
				{
					_clients[pClient->sockfd()] = pClient;
				}
				_clientsBuff.clear();
				_clients_change = true;
			}

			// 前期没有数据时，非常占线程，休眠1毫秒 ( 如果没有需要处理的客户端，就跳过)
			if (_clients.empty())
			{
				std::chrono::milliseconds t(1);
				std::this_thread::sleep_for(t);
			//  timestamp
			   _old_time = CellTime::getNowInMilliSec();
				continue;
			}

			//伯克利套接字 BSD socket
			fd_set fdRead;//描述符（socket） 集合
						  //清理集合
			FD_ZERO(&fdRead);
			if (_clients_change)
			{
				_clients_change = false;
				//将描述符（socket）加入集合
				_maxSock = _clients.begin()->second->sockfd();
				for (auto iter : _clients)
				{
					FD_SET(iter.second->sockfd(), &fdRead);
					if (_maxSock < iter.second->sockfd())
					{
						_maxSock = iter.second->sockfd();
					}
				}
				memcpy(&_fdRead_bak, &fdRead, sizeof(fd_set));
			}
			else {
				memcpy(&fdRead, &_fdRead_bak, sizeof(fd_set));
			}

			// nfds 是一个整数值 是指fd_set集合中所有描述符(socket)的范围，而不是数量
			// 既是所有文件描述符最大值+1 在Windows中这个参数可以写0
			// t:是0 查询没有立即返回，不阻塞 timeval t = { 0,0 };
			timeval t = { 0,1 };
			int ret = select(_maxSock + 1, &fdRead, nullptr, nullptr, &t);
			if (ret < 0)
			{
				printf("select任务结束。\n");
				Close();
				return;
			}

			//else if (ret == 0)
			//{
			//	continue;
			//}
			ReadData(fdRead);
			CheckTime();
		}
	}

	// old  timestamp
	time_t _old_time = CellTime::getNowInMilliSec();
	void CheckTime()
	{
		// current  timestamp
		auto nowTime = CellTime::getNowInMilliSec();
		auto dt = nowTime - _old_time;
		_old_time = nowTime;

		for (auto iter = _clients.begin();iter!=_clients.end();)
		{
			// Heart to check
			if (iter->second->checkHeart(dt))
			{
				if (_pNetEvent) _pNetEvent->OnNetLeave(iter->second);
				_clients_change = true;
			  // delete iter->second;
				auto iterOld = iter++;
				_clients.erase(iterOld);
				continue;
			}
			// send data to check
			iter->second->checkSend(dt);
			iter++;
		}
	}

	void ReadData(fd_set& fdRead)
	{
#ifdef _WIN32
		for (u_int n = 0; n < fdRead.fd_count; n++)
		{
			auto iter = _clients.find(fdRead.fd_array[n]);
			if (iter != _clients.end())
			{
				if (-1 == RecvData(iter->second))
				{
					if (_pNetEvent)
					{
						_pNetEvent->OnNetLeave(iter->second);
					}
					_clients_change = true;
					closesocket(iter->first);
				//	delete iter->second;
					_clients.erase(iter);
				}
			}
			else {
				printf("error. iter != _clients.end()...\n");
			}
		}
#else
		std::vector<CellClientPtr> temp;
		for (auto iter : _clients)
		{
			if (FD_ISSET(iter.second->sockfd(), &fdRead))
			{
				if (-1 == RecvData(iter.second))
				{
					if (_pNetEvent)
					{
						_pNetEvent->OnNetLeave(iter.second);
					}
					_clients_change = true;
					close(iter->first);
					temp.push_back(iter.second);
				}
			}
		}
		for (auto pClient : temp)
		{
			_clients.erase(pClient->sockfd());
			delete pClient;
		}
#endif
	}

	//接收数据 处理粘包 拆分包
	int RecvData(CellClientPtr pClient)
	{
		// 缓冲区
		char *_szRecv = pClient->msgBuf() + pClient->getLastPos();
		//  接收客户端数据
		int nLen = (int)recv(pClient->sockfd(), _szRecv, RECV_BUFF_SZIE - pClient->getLastPos(), 0);

		_pNetEvent->OnNetRecv(pClient);

		if (nLen <= 0)
		{
			//printf("客户端<Socket=%d>已退出，任务结束。\n", pClient->sockfd());
			return -1;
		}

		//pClient->resetDTheart();

		//将收取到的数据拷贝到消息缓冲区 memcpy(pClient->msgBuf() + pClient->getLastPos(), _szRecv, nLen);

		//消息缓冲区的数据尾部位置后移
		pClient->setLastPos(pClient->getLastPos() + nLen);

		//判断消息缓冲区的数据长度大于消息头netmsg_DataHeader长度
		while (pClient->getLastPos() >= sizeof(netmsg_DataHeader))
		{
			//这时就可以知道当前消息的长度
			netmsg_DataHeader* header = (netmsg_DataHeader*)pClient->msgBuf();
			//判断消息缓冲区的数据长度大于消息长度
			if (pClient->getLastPos() >= header->dataLength)
			{
				//消息缓冲区剩余未处理数据的长度
				int nSize = pClient->getLastPos() - header->dataLength;
				//处理网络消息
				OnNetMsg(pClient, header);
				//将消息缓冲区剩余未处理数据前移
				memcpy(pClient->msgBuf(), pClient->msgBuf() + header->dataLength, nSize);
				//消息缓冲区的数据尾部位置前移
				pClient->setLastPos(nSize);
			}
			else {
				//消息缓冲区剩余数据不够一条完整消息
				break;
			}
		}
		return 0;
	}

	//响应网络消息
	virtual void OnNetMsg(CellClientPtr pClient, netmsg_DataHeader* header)
	{
		_pNetEvent->OnNetMsg(this, pClient, header);
	}

	void addClient(CellClientPtr pClient)
	{
		std::lock_guard<std::mutex> lock(_mutex);
		//_mutex.lock();
		_clientsBuff.push_back(pClient);
		//_mutex.unlock();
	}

	void Start()
	{
		_thread = std::thread(std::mem_fn(&CellServer::OnRun), this);
		//  std::thread t(std::mem_fun(&CellServer::OnRun), this);
		_taskServer.Start();
	}

	size_t getClientCount()
	{
		return _clients.size() + _clientsBuff.size();
	}
};

#endif // !_CellServer_Hpp_
